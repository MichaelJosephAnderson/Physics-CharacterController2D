using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : PhysicsObject
{

   
    public float jumpTakeOffSpeed = 7;
    public float doubleJumpSpeed = 7;
    public float maxSpeed = 7;
    public float wallSlideSpeedMax = 3;
    private bool m_FacingRight;
    private bool m_Up;
    public bool canWallJump;

    public float gravityChangeCounter;

    private SpriteRenderer spriteRenderer;

    private bool canDoubleJump;

    public Vector2 wallLeap;

    // Start is called before the first frame update
    void Awake ()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
    }

    protected override void Computevelocity()
    {
        if (grounded)
        {
            canDoubleJump = true;
        }

        bool wallSliding = false;

        if (canWallJump)
        {
            if (touchingWall && !grounded && velocity.y < 0)
            {
                wallSliding = true;

                if (velocity.y < -wallSlideSpeedMax)
                {
                    velocity.y = -wallSlideSpeedMax;
                }
            }
        }

        if (velocity.x < 0 && !m_FacingRight) { Flip(); } else if (velocity.x > 0 && m_FacingRight) { Flip(); }
        if (gravityDirection == 1 && m_Up) { FlipVert(); } else if (gravityDirection == -1 && !m_Up) { FlipVert();  }

        Vector2 move = Vector2.zero;

        move.x = Input.GetAxis("horizontal");
 

        if (Input.GetKeyDown("w") && !Input.GetKeyDown("s") && gravityDirection == 1 && gravityChangeCounter > 0)
        {
            gravityDirection = -1;
            jumpTakeOffSpeed = -1 * Mathf.Abs(jumpTakeOffSpeed);
            doubleJumpSpeed = -1 * Mathf.Abs(doubleJumpSpeed);
            gravityChangeCounter -= 1;
            CounterScript.switchCounter = gravityChangeCounter;
        }
        else if (Input.GetKeyDown("s") && !Input.GetKeyDown("w") && gravityDirection == -1 && gravityChangeCounter > 0)
        {
            gravityDirection = 1;
            jumpTakeOffSpeed = Mathf.Abs(jumpTakeOffSpeed);
            doubleJumpSpeed = Mathf.Abs(jumpTakeOffSpeed);
            gravityChangeCounter -= 1;
            CounterScript.switchCounter = gravityChangeCounter;
        }
       
        if (Input.GetButtonDown("jump"))
        {
            if (grounded)
            {
                velocity.y = jumpTakeOffSpeed;
            }
            else if (Input.GetButtonDown("jump") && canDoubleJump && !wallSliding)
            {
                canDoubleJump = false;
                velocity.y = doubleJumpSpeed;
            }
            else if (wallSliding)
            {
                velocity.y = wallLeap.y;
                
            }
        }
        else if (Input.GetButtonUp("jump"))
        {
            if (gravityDirection == 1)
            {
                if (velocity.y > 0)
                {
                    velocity.y = velocity.y * 0.5f;
                }
            }
            else if (gravityDirection == -1)
            {
                if (velocity.y < 0)
                {
                    velocity.y = velocity.y * 0.5f;
                }
            }

        }

        targetVelocity = move * maxSpeed;
       
    }

    private void Flip()
    {
        Vector2 thePosition = transform.localPosition;
        if (m_FacingRight)
        {
            thePosition.x += 0.5f;
        }
        else if (!m_FacingRight)
        {
            thePosition.x -= 0.5f;
        }
        transform.localPosition = thePosition;

        m_FacingRight = !m_FacingRight;
        Vector2 theScale = transform.localScale;
        theScale.x *= -1;
        transform.localScale = theScale;
    }

    private void FlipVert()
    {
        m_Up = !m_Up;
        Vector2 theScale = transform.localScale;
        Vector2 thePosition = transform.localPosition;
        theScale.y *= -1;
        transform.localScale = theScale;
        if (gravityDirection == 1)
        {
            thePosition.y -= 2;
        }
        else if (gravityDirection == -1)
        {
            thePosition.y += 2;
        }
        transform.localPosition = thePosition;
        
    }

    public void getCrystal()
    {
        gravityChangeCounter += 1;
        CounterScript.switchCounter = gravityChangeCounter;
    }

}
